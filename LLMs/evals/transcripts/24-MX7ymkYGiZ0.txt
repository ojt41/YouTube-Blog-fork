hey guys welcome back in this video we'll be talking about the wavelet transform hey guys welcome back uh this is the final video in the three-part video series on the 48 in wavelet transforms in this video we'll be talking about the wavelet transform which basically takes the ideas we learned in the fourier transform and extends it to a thing called wavelets so let's get right into it alright so in the last video we were talking about the 40 transform which was basically decomposing any signal into a basis of waves you can do the same basic idea but instead of waves you use something called wavelets so wavelet is simply a wave-like oscillation that's kind of localized in space or time whatever your x-axis is so here's an example we have the first derivative of the gaussian function or a bell curve and the equation is given here to the right of the plot so there are two basic properties of wavelets just like there were two basic properties of waves amplitude and frequency wavelets have two basic properties which are scale which is basically how stretched or squished our wavelength is and location since wavelets are localized and not extending from negative infinity to positive infinity like waves we need to know where the wavelet is located in space so here are some examples of kind of our example wavelet at different scales so if it has a smaller scale we're essentially squishing our wavelet if it has a larger scale we essentially stretch our wavelet and this is controlled by the parameter a in our first derivative of the gaussian function given above and then here's the same example with different locations so we can shift our wavelet a little to the left by changing this by tuning this b parameter or we can do this double whammy situation where we shift our way to the right and we squish it and then here's a reference if you want to learn more about wavelets okay so what's the wavelet transform so just like before with the fourier transform we decomposed our signal into a basis of waves we can decompose our signal using wavelets of various scales and locations so the basic idea is you get a wavelet you pick a scale and then you just slide it across your signal and then at every kind of time step or every location in space you multiply that wavelet by your signal and then you do this for one scale then you pick another scale and then you just keep going like that so here's a visualization of what it looks like and if you're familiar with convolutions that's exactly what we're doing here uh you're just convolving your signal and wavelets of different scales so why are wavelets useful if the fourier transform is so powerful as i was uh going on and on about in the first video uh why do we need the wavelet transform well one thing about the fourier transform is that it gives you global frequency information so uh sines and cosines are defined from negative infinity to positive infinity so it gives you a kind of global average of the frequency information in your signal and if you're interested in uh kind of oscillations that happen over a short time scale the 40 transform may obscure that information and that's exactly what the wavelet transform is good at extracting localized information on the second point the wavelet can not only extract the local spectral information but it can also extract temporal information at the same time which is really nice so you kind of have this trade-off of frequency information and time information but the wave of the transform is kind of like a happy medium of uh between those two and there's also a variety of wavelets to choose from so let's say the signal the sub signal inside of your audio signal that you're interested in has a characteristic shape then you can kind of choose your wavelet in a clever way such that it kind of matches the signal of interest the thing you're trying to extract from your signal and then this is just a lot of math i'm not going to spend too much time here but there are two basic kinds of wavelets there's the continuous wavelet transform and the discrete wavelet transform the major difference is the continuous wavelength transform you pick basically every possible scale and location to do your wavelet transform so you do scale 1 and 1.1 1.2 whatever your resolution is every possible scale uh while the discrete wavelet transform there's only a discrete number of wavelets uh discrete number of wavelet scales and locations that you use to do your transform and then here's just you know just some more general information wavelets create a complete set which means you can represent any function in terms of wavelets which is nice okay and then we're gonna try to bring everything together with a concrete example so this is something relevant to my research which is uh extracting our peak information which is basically the biggest peak you see in uh your favorite medical tv show in ecg which is basically the um electrical activity resulting from your heart beating so we can extract this characteristic our peak or this giant jump in the ecg signal using wavelets so we're using a specific kind of discrete wavelength transform called maximal overlap discrete wavelength transform in this example and you can find the this example code with all the plots and a nice pdf of it at the github link here okay so the first step is we do the wavelet transform here i picked a number of levels or a number of different scales to b6 and then we use the sim 4 wavelet for our wavelength transform so at the top we have our original signal you can kind of see the characteristic the signal of interest which is like this localized peak that's the rpeak we're interested in but the signal is really noisy so it's kind of hard to you know do a simple fine peaks function to extract the rpeaks but if we do this wavelet transform we can see at the first scale the smallest scale which will correspond to the highest frequency because our wavelength is very squished it just looks like a lot of noise so that's not really helpful we go to the next scale we can kind of see the rpeak signal coming out a little bit but still really noisy the next scale is a little bit better um the fourth scale is kind of the goldilocks we we see a really large oscillation near our peaks and then everything else is basically uh zero so that's promising and then we just keep going down and then you can see for the largest scale we have like this low frequency oscillation which makes sense big scale means lower frequency so the rest of the code is just making this plot here so now we can reconstruct our signal using the inverse maximal overlap a discrete wavelet transform uh so that's what that's what's happening here um you know just to run through the code really quickly we are only going to use that fourth scale which was oscillating a lot around our peaks and it was zero everywhere else so that was really promising so we're only going to use that information to reconstruct the signal and then matlab and a lot of programming languages there's probably equivalent functions in uh python or r uh that let you do the inverse maximal overlap discrete wavelet transform in one line so we're going to reconstruct it using only the fourth scale the two to the fourth scale and then we're going to use the sim 4 wavelet again and then the rest of it is just plotting this this image on the right here so the on the top we have the original signal so it's pretty noisy but you can still see where the rpgs are visually but then our reconstructed signal is a lot better behaved and you can see it's almost trivial um picking out the r peaks in the reconstructive system and then this last bit of code is just leveraging that so our reconstructed signal it's really easy to pick out the art peaks so we can just do a simple fine peaks function and then we can plot those peaks on our original signal and it does a reasonable job and so again you can find this code on the github if you want to take a closer look at it if you want to just completely steal it that's completely fine with me i kind of took a lot of this code from a matlab example that did a similar thing with a different data set so i encourage you to take a look at that so that was wavelets i hope you guys enjoyed these three videos found this video helpful like subscribe comment i'm always trying to get better improve my understanding learn grow all that fun stuff yeah thanks for watching you