python is the go-to programming language for doing Ai and data science although no code Solutions exist if you want to build fully custom AI projects and products learning python is still essential in this video I'm going to give a beginner-friendly quick start guide to learning python specifically for AI projects and if you're new here welcome I'm Shaw I make videos about data science and Entrepreneurship if you enjoyed this content please consider subscribing that's a great no cost way you can support me in all the videos that I make this video is going to be broken up into three main sections first I'm going to start with a highle introduction of python and who this video is made for second I'm going to walk through the fundamentals and basics of python and then finally I'm going to share an example AI project showing how we can use Python to create a research paper summarizer and keyword extractor starting with the super basic question of what is python python is a programming language which is simply a way to give computers precise instructions to do things that we can't do or just don't want to do one example of this from my world is I'll send follow-up emails after Consulting calls with clients so the current process is we'll have the call I'll get on my laptop and type up a follow-up email and then I'll send the client the email however if this was something that started to get out of hand and I ended up spending hours every week writing follow-up emails I might create a python script that would do this instead of me typing up the email after the call I could create a python script to do this automatically and this is just one random example there are very few constraints on the things that you can do with python and AI another thing I want to highlight is that coding now is easier than ever two of the major reasons for that are Google and chat GPT so for example if I wanted to figure out how I can send emails automatically with python my first thing might be I just go to Google and type that into the search bar and then I'll get results that look like this so stack Overflow if you're not familiar is a very popular developer Forum where people are constantly sharing their questions and more experienced programmers are sharing answers the power of things like Google and stack Overflow is that it Taps into the wisdom of the crowd so key thing here is that no individual knows everything about python however if you get a collection of people together their Collective knowledge far exceeds any single individual and this is something that you can tap into using forums like stack Overflow or just generally browsing the web the second thing that's really become a game changer for a lot of developers is chat GPT and other tools like it another option here is instead of typing this into Google is you might type this same prompt into chat gbt so if you type this into chat gbt it'll give you a step-by-step answer as well as example code however that's not the only benefit of using chat gbt for coding questions one of the most powerful aspects of it that I really enjoy is the ability to ask follow-up questions so if there's something that doesn't really make sense here like what is the meaning of MIM or why is it called SMTP lib just these random questions that I might have and these might be questions if you asked a regular developer or program they might get annoyed at you because you're getting way too into the weeds or getting way too pedantic but Chachi BT is eternally patient and can answer almost any beginner level question with a high degree of accuracy I'm making this tutorial with a specific audience in mind namely people who are learning Ai and have done some coding but are brand new to python some examples of this might be someone who works as a consultant or even a business intelligence analyst another demo I have in mind are students or recent graduates but also seasoned developers who might just be new to python this is not meant to be a comprehensive introduction or overview into python rather the goal here is to Simply give you just enough to get you started coding your very first AI project and doing that as quickly as possible so with that let's just jump into the basics of python the first thing is that most computers come with python pre-installed so the first thing to do is to check if you have python installed on your machine if you're on Mac or Linux you can do this through the terminal app or if you're on Windows you can do this via command prompt or even Powershell I can show you what that looks like real quick here we have terminal opened up and I'm simply just going to type in Python if I do that we can see the python version that we're using and has some basic instructions with this we are in Python right now and we can go go ahead and start coding however if you type Python and this does not come up that means you're going to need to install python on your machine that's actually pretty straightforward if you are on Mac you can go to this link here if you're on Windows you can go to this link here and of course I'll share these in the description below but just seeing what that looks like this is the official python documentation and if you go to this python website link here it'll have a set of downloads for stable releases of python so if you're on Mac you can go ahead and click this thing and it will download an installer you can use to get python on your machine and a similar thing for Windows alternatively there's a popular python package system for data science called Anaconda this is available for Windows Mac and Linux so this is another way you can install Python and this has some handy features beyond the base installation of python now that we've confirmed we have python installed let's start digging into some key Concepts and code the first thing I want to talk about are data types which are simply a way to classify data so it can be processed appropriately and efficiently one example of this are strings which are character sequences which we can use to represent arbitrary text here are some examples of strings hello and hello spelled with numbers and special characters we can also go back to our terminal here and start typing strings so hello is an example of a string we can also write strings with single quotation marks so this is another way to write strings fundamentally there's no difference between using the double quotes and single quotes for Strings but what that does allow you to do is to use quotations in your strings themselves for example if we wanted to have the string sha said python is awesome the double quotation marks is going to cause an error however if we use the single quotes oh oops messed it up however if we use the single quotes we can have this be a string and the last thing I want to show here is we can also use triple quotes if we want to have strings across multiple lines and then you'll see that this new line character will appear in our string some other data types that we can use to represent numbers are ins which are integers and floats which are numbers that contain decimal points so going back to our terminal an example of an in is 1 2 42 you know just like in math floats would be anything with the decimal so 1.0 3.14 and then we can add two of the same data types together so we can add two integers we can add two floats we can even add an integer and a float and then python will automatically convert the integer into a float before doing the operation and we can even add strings together so here's an example of that so here we've added a string together another words we've concatenated it however we can add a number to a string so if we try that we'll get an error although ins and floats can be added together ins floats and strings cannot be added together if we wanted to do that we would have to write one as a string another fundamental data type are lists which are ordered collections of values some examples of that are shown here we can have a list of strings like a C we can have a list of integers like 1 2 3 we can also have a list with mix types so we could have a 2 and 3.14 and we can even have a list of lists this flexibility makes lists a very handy data type when doing AI in data science projects the final data type I'm going to talk about are dictionaries which are key value pair sequences what that looks like is a little different than a list so instead of the square brackets we have these curly brackets and then we have key value pairs where each item in the dictionary consists of two parts a key which will always be a string and a value which can be any data type and so a simple dictionary might have a single item with a key called name and a value of Shaw which is my name something a bit less trivial is to have a dictionary with multiple key value pairs corresponding to the name age and interests of a individual so here have the name as Shaw have age as 29 so you notice that this is an integer and then interests are organized in a list so we have multiple data types in this dictionary but we can also combine the list in dictionary data types so we can have a list of dictionaries here instead of just having a dictionary corresponding to one person we have two dictionaries corresponding to two different people so we have sha who's 29 interested in AI music and bread and then we have iffy who's 27 who's interested in marketing YouTube and shopping the last thing is we can also have a dictionary within a dictionary the way that looks is we might have a key value pair corresponding to a user and the value for this item will be another dictionary which includes user information then the other items in the dictionary might be the last login date and the membership tier of that user the next thing I want to talk about are variables which are abstract representations of underlying data so far we've just written data types explicitly as Sha or a set of numbers or a list or a dictionary if you had to continuously write out lists and dictionaries in your python code it would become very tedious very quickly this is where variables come in what we can do is instead of writing sha over and over over again in our code we might create a variable called username and set it equal to Shaw and then anytime we wanted to plug in the user's name we could just use the variable instead of writing it explicitly so if we printed the username variable we would see Shaw in the command line a more sophisticated example is we can Define two other variables one called the users age and another one called user interests which are a int and list respectively and then we can print those out in this way the output of this is Shaw is 29 years old his interests include AI music and bread not only does this save us from writing strings ins and lists over and over again in our Python scripts it also allows our scripts to be much more flexible because now let's say we wanted to print this sentence for another user so instead of just hardcoding this instead of writing this explicitly in our script we can simply plug in a new username a new user age and a new new user interests list another thing I want to call out here is here we're seeing yet another way to write a string so we saw we could write a string with single quotes double quotes and triple quotes here is an example of a formatted string this is helpful when you dynamically want to convert a set of data types to a string here we're seeing username which is a string user age which is an INT and user interests which is a list all dynamically concatenated together as a string and then we can print the resulting string like this these days where a lot of AI code might involve creating prompts and sending prompts to large language models formatted strings are a very handy functionality when creating prompt templates for these types of use cases so far we've covered data types and then creating abstract representations of these data types as variables now let's see how we can write Python scripts scripts are essentially text files with thep extension the simplest way to create a python script is to go to a basic text editor and instead of saving your text file with the txt extension you just change it to a py extension and it'll get saved as a python file which can then be understood by your python installation as being a program as opposed to a text file however this isn't always the most convenient way to write python script scripts rather it's common to use an IDE which stands for integrated development environment and all this is is a application that enables you to write Python scripts and really any other script for a programming language some very popular ones in the space are VSS code py charm and among data scientists Jupiter lab is very popular just to show you what that looks like here we have VSS code I'm going to open a folder I'm going to open this folder called python quickart which is freely available on the GitHub and so we see that there already some files here but I'm actually just going to create a new one so I'll create a new one and I'll call it python example and then I'll be sure to create it with thep extension and now we'll have this script here and we can start writing a python script writing a program here I'm going to create the ceremonial first program that every developer writes which is print hello world what this is going to do is if we go to our terminal I'm going to quit out of python I'm going to clear this I'm going to hit LS which allows us to see all the folders and files in the current directory and we see that our python example.py is sitting right here I'll type Python and then I'll copy paste this here we run that we see our program prints hello world that's the simplest python script that we might create and I used vs code to do that but you can of course use whatever IDE or application you like to create Python scripts another one that I've been playing around with recently is called cursor which kind of went viral on Twitter and the thing with cursor is that it's AI native it integrates large language models into the user experience to help you write code faster and of course there are other idees and co-pilots that do things like that as well next we're going to talk about loops and conditions at this point it'll probably be best if you're running these code examples to be typing these into a python script which you can run because these examples are going to run over multiple lines it won't be something that you can easily write and debug within the terminal itself and I can do that a little bit as we go along first let's talk about a loop and all a loop does is it runs a chunk of code multiple times one of the most popular Loops that you're going to C is a for Loop here's a very simple for Loop that's going to iterate over a sequence of numbers so Range Five creates a sequence of numbers of length five spanning 0 1 2 3 and four then what the for Loop does is that it's going to iterate along this sequence one element at a time then we're going to print each element as we go along so if we did this this is what would get printed out in the command line we can quickly see what this looks like with our VSS code script so let's just write 4 I in range five we'll make sure to put the colon there and then we'll just do print I and we'll save that then we'll open up our terminal again I'll hit clear and then I'm going to run that same command from before so Python and then python D example.py so if we print that we see our hello world from earlier but then we're also seeing each element in that range being printed out another example is we can iterate over items in a list let's say we have our user interests again of AI music and bread we're not just limited to iterating over numbers in a sequence we can also iterate over the elements themselves in lists if you're used to programming in c or one of the lower level languages this might seem like magic or something at least it was for me when I first started learning Python and this makes a lot of use cases pretty convenient when you can iterate over items themselves so if we run this script what's going to get printed out are each item in this list AI music and bread finally we can also iterate over items in a dictionary so if we create a dictionary and then here I'm going to iterate over the keys in this dictionary keys will extract each key from this dictionary and give us the ability to iterate over them so what this is going to be is a sequence of keys it's going to contain name age and interests so we're going to iterate over those and then we can access the values of the dictionary by using the key so here it's going to print the key itself like name and then we can print the value corresponding to that key using this syntax we have the user dictionary square brackets and then the key that we want to reference so if we run this this is the output that we'll get so we'll have name equals sha name is the first key sha is the value corresponding to that key then we have age and interests next let's talk about conditions which allow us to program logic with python a fundamental example of this are if else statements one way we can use this is if we wanted to check if the user is older than 18 for that we would simply write something like if the user's age here we're referencing the age value Val in the user dictionary here we're very intuitively checking if the value of the user's age is greater than or equal to 18 and then we have our colon here and then if this statement is true then python will execute the following command it will print user is an adult recall the value for the user age was 29 so this is true thus python should print this string here and indeed that's what happens alternatively we can also have an else not only will it do something if it's true if it's not true we can have python do another command here we're going to check if the user is older than 1,000 and if not we're going to print they have much to learn here the user's age is 29 which is not greater than or equal to 1,000 so instead of executing this command it's going to jump down to this else and print this and so this is what we'll see in the command line but we can also bring loops and conditions together so an example of this is if we wanted to count the number of users in a list that are interested in bread here we're going to define a user list which is a list of dictionaries and it's going to have two elements we'll have the first element being a dictionary corresponding to the user sha and then we'll have a second dictionary correspond responding to the user ify then we're going to initialize a count variable so we have this variable called count and we're going to set it equal to zero then what we're going to do is we're going to Loop through each element in this user list so we have two elements here so we'll start with this element and then go to the second element then for each user we're going to evaluate this condition we're going to see if bread is in the user's interest breaking this down for user one is going to be sha user is going to be a dictionary then we're going to extract the value corresponding to the interests key that's going to be this list here and then we're going to evaluate whether bread appears in that list in this first case bread indeed is in the list so Python's going to execute this line of code which takes the count variable which is currently zero it adds one to it and then it updates the count variable from being 0 to one and for people who are new to programming this may be unintuitive CU When we see equal sign we might think of math where the left hand side is supposed to equal the right hand side however equal here isn't saying that the left hand side is equal to the right hand side what it's saying is we're assigning this variable count equal to whatever is on the right hand side here so this is a very common way of updating a variable in a for Loop so we just did that for element one now we're going to go to element number two iy and we're going to run the same chunk of code so we'll evaluate the interests we'll see if Brad is in there and we can see that bread is not in iy's interests so nothing is going to happen it's not going to execute this line of code and it'll just continue so at the end of this we can print the count and what we'll see is that one user is interested in in bread and so you can already see through the very simple elements that we've talked about so far we've talked about lists strings integers dictionaries we've talked about for Loops we've talked about if El statements we've talked about printing values and just with these basic building blocks we're able to create this more sophisticated program that counts the number of users interested in bread next let's talk about functions these are operations we can perform on specific data types we've already seen some examples of functions one is the print function which simply prints the input to the command line here we have a for Loop that's going to iterate through all the keys in a dictionary and print the key and the corresponding value so here we're using user dict so if we recall it's just this dictionary here we run this script it's just going to print the key value pairs in this dictionary another example of a function is type which Returns the data type of an input variable here we're going to do a similar thing but instead of printing the value corresponding to the key we're going to print the type of the value if we do that what's going to Output is not the values themselves but the type of each value so name is a string age is an in in and interests is a list this is super handy because a lot of times you'll have these errors popping up in your code and simply printing variables and their types can often give you a better understanding of what's going on and help you debug the program another function is len which Returns the length of an input variable here we're going to print not the type of each value but the length of each value however when we run this we actually get a type error because this function Len is not defined for integers so although we got something for name the length of name was four because it consists of four characters Len is not defined for integers so it threw an error and as a bonus if we were to compute the length of interests we would get three because it consists of three elements Len is an example of a function that's only defined for specific data types so unlike print and type which are defined for every data type Len is not however there are several other examples of data type specific functions here's a set of functions defined specifically for Strings so let's say we have the string sha which lives in this dictionary here if we wanted to make all the characters in this string lowercase we could use this lower function that'll print the string like this we can similarly make every character uppercase and that'll print this we can also split strings to convert them into lists so we can split sha on H and a and what that'll create is a list with two elements corresponding to S and W another handy function for Strings is do replace which allows us to replace an arbitrary sequence of characters in a string with another so let's say we wanted to replace every W in this string with wh i n this will print shahen which which is my full name similarly there are a set of functions specifically for lists so let's say we have this list of interests here AI music and bread if we wanted to add an element to the end of this list we can use the append function if we did append entrepreneurship that would update the list to this if we wanted to remove a specific element from the list we can use the pop function and specify which element we want to remove so if we did zero that will remove the zeroth element of this list and return this finally if we wanted to insert an element into a specific place in the list we can use the do insert function specifying the element and where we want to insert that element so we did do insert one AI we would insert AI into the second place of this list and then finally we have a set of functions for dictionaries if we wanted to extract all the keys from a dictionary we can use the dot Keys function which is something we've already seen before so this will extract all the keys from a dictionary which we can iterate through using a for Loop for example we can do the same thing for values using the values function so now we see the values from the dictionary we can also access the items of a dictionary not just the keys or the values but the key value pairs that'll look like this and then if we print the items of the dictionary we see that name is no longer included then if we wanted to add a new item to a dictionary we can simply specify the new key name in square brackets of that dictionary and set that equal to a specific value so if we wanted to add name back in we could use this and then printing the items we can see that name has been added back into the dictionary however we're not just limited to Python's out of thebox functions we can also o create our own custom functions so these are called userdefined functions an example of this might be taking in a user dictionary and printing out all the users's information in a sentence so this is the same thing we did earlier using a formatted string however here we're going to define a function to do it you'll also notice that I Ed the triple quotes to create a string here that describes what the function does this is called a doc string and this is just a handy way to document what your function is doing so that other people can better understand your code and also helping your future self understand what this function is doing once we Define this we can use this function by passing in our user dict and it'll output this string which I call description which we can then print we print this we see it says sha is 29 years old and is interested in music however if we just wanted to do this once there's not a whole lot of upside in creating a custom function but if we wanted to generate this user description many many times functions are super helpful because now when we want to do the same thing for another user we simply pass in a new user dictionary to this user description function and print the result so if we want to do the same thing for iy we see it says iy is 27 years old and is interested in marketing next we can do something a bit more complicated and create a function to count the number of users interested in an arbitrary topic this will be pretty similar to what we did before but instead of just looking at the number of users interested in bread we'll have the topic of Interest be an input to the function here we'll initialize the count again as zero then we have our if condition within a for Loop so we'll Loop through an inputed user list we'll see if the inputed topic is in the user interests and if it is We'll add one to the running count then once we make make it through all the users in the list we'll return the count with this function we can define a user list so we'll have two users we'll have User Dictionary corresponding to Shaw and then we'll have new user dictionary corresponding to iffy and we'll select an arbitrary topic of shopping and then we'll compute the count using our userdefined function here then we'll print the count using a formatted string what the output of this will be is one user interested in shopping so far we've seen the power and flexibility of python and in fact python can be used to implement any arbitrary program but of course if we had to implement everything we wanted to do from scratch in Python this can easily become very timec consuming one of the key upsides of python is that there is a vibrant developer community and a robust set of open-source python libraries what this means is for virtually any anything you might want to implement in Python there's likely already an open-source library that exists for that so talking about the AI and data science space Here's a visualization of some handy python libraries of course this is a non-comprehensive overview but this is a set of libraries that will be helpful to any data scientist or AI engineer so under data frames which are convenient ways to structure data for analysis we have pandas and polers for data visualization we've got matplot lip Seaborn and plotly for basic machine learning we've got sklearn and XG boost for deep learning popular libraries are pytorch and tensorflow for more modern generative AI tasks there's the Transformers library and open AI API and then for web stuff for making API calls and formatting html text there's the request library and beautiful soup 4 respectively in order to install these libraries we can use pip which is Pyon 's default package manager so if we wanted to install say numpy which is a fundamental library for doing math in Python we can simply type pip install numpy at the command line with numpy installed we can do several things which are not possible with basic python the first is we can create this array data type which mimics a vector or a matrix from linear algebra so if we want to create a one-dimensional matrix we could do it like this if we wanted to multiply that matrix by two we could could simply multiply by two if we want to create a two-dimensional Matrix we can concatenate together multiple one-dimensional matrices here we see a 3X3 Matrix and then if we wanted to do matrix multiplication we can use the Matt mole function in numpy and so this will automatically do matrix multiplication for us and of course there's several other things that you can do in numpy which you can find in the example code on the GitHub repository and the last thing I'll say about libraries is creating virtual ual environments when using open- Source python libraries in your projects every project is going to have a set of dependencies a set of libraries that it needs in order to execute successfully for these types of projects it's a best practice to create a virtual environment all this does is keep track of all the libraries and their versions needed for your project to do that we do python dmvnv this is saying that we want to create create a new python virtual environment and then we can give it any name we like so here I called it my- EnV then we can activate this virtual environment with mac and Linux you can type Source my- EnV /bin activate or if you're in Windows you can just run this batch file like this then with that virtual environment activated you can install all the libraries you like using pip now let's get into the example AI project so up until this point we've just covered the basics of python we haven't done anything that could be considered AI so let's see what implementing a simple AI project might look like with python here what I'm going to do is write a program that can summarize and extract keywords from research papers this example along with all the other code Snippets we've seen so far in this tutorial are freely available at the GitHub repository linked down here and in the description below our first step is going to be to install all the required libraries for this example just like before where we did pip install and had a specific package name another way we can install libraries is from a text file that lists several libraries that are necessary for a project here I've created a requirements. text file available at the GitHub which lists all the libraries we can actually look at that here so I've opened it up in vs code and we can see that it lists several Library names along with their versions so when we run pip install dasr requirements what pip does is it goes line by line through this text file and installs each of these libraries and the correct version so we can actually see what that looks like real quick so we can do python DMV EnV and I'll call it my environment like before and then since I'm using Mac I can write Source my so whatever virtual environment name you chose bin SL activate now you can see that our terminal looks kind of different we have this my EnV sitting here what we can do next is to install all the requirements we see that I have the requirements file sitting right here in the current directory so I can install all of them like this so I'll do pip install Dash R and then I'll put the name of the requirements file.txt I'll run that then pip will go ahead and just automatically install all the project libraries then we can double check that by doing pip list so this will list all the packages and we can see that everything has indeed been installed next we can go into our python script and import the necessary libraries we're going to import fits which will allow us to extract text from PDFs we're going to use the open AI python API and then we're going to import Cy finally I will import my open AI API key here I have a separate python script called sk. piy and what I'm doing is importing a variable called myor SK myor SK is a string which contains my open AI API key I'm importing it in this way just for security reasons I don't want to hardcode my API key in the example code that's just not a good practice because if you forget that you put your API key in a script and you share it with someone or put it up on GitHub then other people will be able to use that API key and they might rack up a bill that you'd be responsible for just to see what this sk. py file looks like so if we go here I don't actually have my API key here because this is the version on GitHub but what you can do is just copy paste your API key into this python file and it should work fine alternatively if you're just running this locally and you want to do something fast you can just skip this step and just hardcode your API key but of course just be careful that you're not sharing that file with anyone we'll import this variable from this sk. piy script and then we'll set our open a. API key to my secret key next we're going to define a function that will read in the text from a PDF this function is actually kind of long so I'm going to break it down into three parts first I'm going to Define our function that's called extract abstract and if you're not familiar an abstract is like a summary paragraph of a research paper that is at the beginning of that paper extract abstract will take in one input which will be a string specifying the path of the PDF that you want to extract the text from given that PDF path we're going to grab the text from the first page of that PDF file the way we do that with this fits library is we do fits. openen PDF path as PDF basically what this is going to do is create this PDF object that allows us to access the text in the PDF so here we're going to get the first page of the PDF like this so we're grabbing the zeroth element from this PDF object and that'll correspond to the first page and then we can specifically grab the text from this first page using this function here. get text and then we'll just say text here now all the text from the first page is represented by this text variable next what we can do is extract the abstract from this text so text is just a string going to be a bunch of characters so what we want is to find where in that string the abstract lives the way I'm doing it here is that I'm going to find a start index and an end index basically at what element does the abstract start in the string and then at what element does the abstract end here what I do is I take all the text I make it all lowercase and then I do this find function so what this find function is going to do is going to find the word abstract in this text and then it's going to return the index number corresponding to where abstract is in this larger piece of text then we don't just want the start position we also want the end position of the abstract so this one's a bit more tricky because the PDF could come in many different formats could just have the abstract on the first page it could also have the abstract on the first page and then go into the introduction or many other possible situations so here what I do is if the word introduction exists in the text what I do is I find where introduction is then I set that as the end index however if introduction is not in the text I'll just set the end index as as none so basically we'll only care about where the abstract starts and then we'll just consider the text until the end of the first page what I do here is I grab the text starting from our start index all the way to the end index and then I use this strip function which will remove any trailing or leading white space from the text and then there's one more step because there's always the situation where the word abstract does not appear on the first page so we need to account for that basically what we're doing here is we're checking if the start index exists so instead of checking whether start index is equal to minus1 this is checking if start index is not equal to minus1 so if it's not equal to minus1 that indicates that abstract is on the first page of the PDF and so we can move forward with the abstract as we have it however if start index is equal to ne1 that means the abstract does not appear on the first page so we'll actually return none that's our extract abstract function next we're going to extract a summary and keywords given in abstract so we're defining another function here it'll take in the abstract we'll create a prompt using a formatted string The Prompt that we're going to send to gbt 40 mini is summarize the following paper abstract and generate no more than five keywords and then we're going to dynamically insert the abstract into the prompt then we're going to make our API I call here we're using open ai's chat completions API we can specify the model we want to use which here we use GPT 40 mini which is the cheapest and fastest model open AI has and then we'll send the model our prompt openi API has the ability to create system messages as well as user messages here we just have the system message as you are a helpful assistant and then the user message so this would be as if we went to chat gbt and type something in will be the prompt that we def find up here and then we set the temperature to 0.25 so loosely speaking temperature essentially sets the randomness of the model's responses a very low temperature means that the response will be very predictable and a very high temperature means that the response will be very unpredictable we'll make this API call and this is essentially like us typing this prompt into chat GPT and then getting a response we can extract the response like this the response will have a lot of different components to it but here we're going to extract the first choice we're going to extract the message from that First Choice and then we're going to extract the content from that message and then we'll return that as our summary and keywords finally we can bring everything together and so here we're going to grab the PDF path from the command line what this enables is that the user can type in the path of the PDF they want to summarize on the command line and then python will grab that text and store it as this PDF path variable and then we can pass the PDF path variable to our extract abstract function so this will return the abstract for us then we can use our summarize and generate keywords function to generate the summary however if the abstract is a nun type so basically the abstract did not exist on the first page of the PDF python won't execute this chunk of code and instead we'll jump to the else bit and print abstract not found on first page that's the end of the script once we've written that we can run that from the command line so we'll do python summarize DP paper. py so that's what I called the script in this case and then here is the command line argument that we're going to pass to this python script this is our PDF path so I have this files folder and in that folder I have a PDF called attention is all you need which is a PDF of the famous Transformers paper and then if we run this this is the output we get at the command line so we get a summary of the attention is all you need paper and then we get a set of keywords courtesy of gp4 many here we covered a ton of information however there's still so much to explore when it comes to Python and Ai and I find the best way to navigate this ocean of information is to learn by doing in other words by building your your own AI project in order to do that here I'm going to share three tips first and foremost use Google and chat GPT generously I don't know a single programmer who does not use Google or chat GPT or some combination as a sidekick any time that they're coding something up and it's simply because that a lot of times you run into error messages that just don't make sense and this is especially true at the beginning of your python Journey where you just don't have a lot of experience these tools are just great ways to help you accelerate your learning and progress next is figuring it out is a key skill that you need to develop as a programmer what this comes down to is just having the right mindset that even though something doesn't make sense to me right now I'm capable of figuring it out instead of saying things like I don't know how that works change your mindset to I don't know how that works yet so often we are just one Google search or one explanation away from unlocking something that doesn't make sense and this is something you'll run into over and over again as You Learn Python finally take the example code that I shared here and hack it to create your first AI project now that we have these large language models which are capable of solving so many problems and accomplishing a wide range of tasks integrating them into your Python scripts enable you to offload a large amount of software development and logic to the large language model which allows you to move a lot faster if you enjoyed this video but you want to learn more check out the blog and towards data science there I covered details I probably missed here and although this is a member only story you can access it completely for free using the friend Link in the description below I'll also call out the GitHub repository which contains all the example code that we saw in this tutorial and as always thank you so much for your time and thanks for watching